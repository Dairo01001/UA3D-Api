generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserStatus {
  id     Int     @id @default(autoincrement()) @map("id_userstatus")
  name   String  @unique @map("name_userstatus")
  status Boolean @default(true) @map("status_userstatus")

  users User[]
}

model User {
  id       String @id @default(uuid()) @map("id_user")
  username String @unique @map("username_user")
  password String @map("password_user")

  status   UserStatus @relation(fields: [statusId], references: [id])
  statusId Int        @map("statusid_user")
  role     Role       @relation(fields: [roleId], references: [id])
  roleId   Int        @map("roleid_user")
  person   Person?
  profile  Profile?
}

model Role {
  id     Int     @id @default(autoincrement()) @map("id_role")
  name   String  @unique @map("name_role")
  status Boolean @default(true) @map("status_role")

  users User[]
}

model Profile {
  id        Int      @id @default(autoincrement()) @map("id_profile")
  birthDate DateTime @map("birthdate_profile")
  phone     String   @map("phone_profile")
  photo     String   @map("photo_profile")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("userid_profile")
}

model Person {
  id            Int     @id @default(autoincrement()) @map("id_person")
  firstName     String  @map("fistname_person")
  secondName    String? @map("secondname_person")
  firstSurname  String  @map("firstsurname_person")
  secondSurname String? @map("secondSurname_person")
  email         String  @unique @map("email_person")

  program   Program @relation(fields: [programId], references: [id])
  programId Int     @map("program_id_person")
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique @map("user_id_person")
}

model Faculty {
  id     Int     @id @default(autoincrement()) @map("id_faculty")
  name   String  @unique @map("name_faculty")
  status Boolean @default(true) @map("status_faculty")

  programs Program[]
}

model Program {
  id     Int     @id @default(autoincrement()) @map("id_program")
  name   String  @unique @map("name_program")
  status Boolean @default(true) @map("status_program")

  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  facultyId Int      @map("faculty_id_program")
  persons   Person[]
}

model Server {
  id               String @id @default(uuid()) @map("id_server")
  pvtoPort         Int    @unique @map("pvto_port_server")
  port             Int    @unique @map("port_server")
  urlHost          String @map("urlhost_server")
  gridName         String @unique @map("gridname_server")
  dataSource       String @unique @map("datasource_server")
  dataBaseName     String @unique @map("databasename_server")
  dataBaseUser     String @map("databaseuser_server")
  dataBasePassword String @map("databasepassword_server")

  status   ServerStatus  @relation(fields: [statusId], references: [id])
  statusId Int           @map("statusid_server")
  files    ServerFiles[]
  islands  Island[]
}

model ServerFiles {
  id   Int    @id @default(autoincrement()) @map("id_serverfiles")
  name String @map("name_serverfiles")
  path String @map("path_serverfiles")

  server   Server @relation(fields: [serverId], references: [id])
  serverId String
}

model ServerStatus {
  id     Int     @id @default(autoincrement()) @map("id_serverstatus")
  name   String  @unique @map("name_serverstatus")
  status Boolean @default(true) @map("status_serverstatus")

  servers Server[]
}

model Island {
  id           Int    @id @default(autoincrement()) @map("id_island")
  name         String @map("name_island")
  positionY    Int    @map("positiony_island")
  positionX    Int    @map("positionx_island")
  sizeY        Int    @map("sizey_island")
  sizeX        Int    @map("sizex_island")
  internalPort Int    @map("internalport_island")

  server   Server @relation(fields: [serverId], references: [id])
  serverId String
}
