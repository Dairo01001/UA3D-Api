openapi: 3.0.0
info:
  title: UA3D API
  description: API para UA3D
  version: 1.0.0
tags:
  - name: Auth
    description: Autenticaci√≥n de usuarios
  - name: Faculties
    description: Facultades de la universidad de la Amazonia
  - name: Persons
    description: Usuarios de la plataforma
  - name: Profiles
    description: Perfiles de usuarios
  - name: Programs
    description: Programas de la facultad
  - name: Roles
    description: Roles del sistema
  - name: Servers
    description: Servidores del sistema
  - name: ServerStatus
    description: Estados del servidor
paths:
  /auth/signin:
    post:
      summary: Signin
      tags: [Auth]
      description: Login del usuario
      operationId: sign-in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /faculties:
    post:
      security:
        - bearerAuth: []
      summary: Crea una facultad
      tags: [Faculties]
      description: Crea una facultad
      operationId: create-faculty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faculty'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'

    get:
      security:
        - bearerAuth: []
      summary: Trae todas las facultades
      tags: [Faculties]
      description: Obtener facultades
      operationId: get-faculties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faculty'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'

  /faculties/status:
    get:
      tags: [Faculties]
      summary: Trae todas las facultades activas
      description: Obtener todas las facultades Activas
      operationId: get-active-faculties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faculty'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'

  /faculties/{facultyId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza una facultad
      parameters:
        - in: path
          name: facultyId
          schema:
            type: integer
          required: true
          description: ID de la facultad que desea actualizar
      tags: [Faculties]
      description: Actualiza una facultad
      operationId: update-faculty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Faculty'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'

    delete:
      security:
        - bearerAuth: []
      summary: Elimina una facultad
      parameters:
        - in: path
          name: facultyId
          schema:
            type: integer
          required: true
          description: ID de la facultad que desea eliminar
      tags: [Faculties]
      description: Elimina una facultad
      operationId: delete-faculty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Consulta una Facultad
      parameters:
        - in: path
          name: facultyId
          schema:
            type: integer
          required: true
          description: ID de la facultad que desea consultar
      tags: [Faculties]
      description: Trae una facultad por ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /faculties/{facultyId}/programs:
    get:
      summary: Obtiene todos los programas de una facultad
      tags: [Programs]
      description: Obtiene todos los programas de una facultad
      operationId: get-programs-by-faculty
      parameters:
        - in: path
          name: facultyId
          schema:
            type: number
          required: true
          description: ID de la facultad
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /persons:
    post:
      summary: Crea un usuario
      tags: [Persons]
      description: Crea un usuario
      operationId: create-person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePerson'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /person/{personId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza un usuario
      parameters:
        - in: path
          name: personId
          schema:
            type: string
          required: true
          description: ID del usuario que desea actualizar
      tags: [Persons]
      description: Actualiza un usuario
      operationId: update-person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePerson'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /profiles:
    post:
      security:
        - bearerAuth: []
      summary: Crea un perfil
      tags: [Profiles]
      description: Crea un perfil
      operationId: create-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    patch:
      security:
        - bearerAuth: []
      summary: Actualiza o crea un perfil
      tags: [Profiles]
      description: Actualiza un perfil o lo crea si no existe
      operationId: upsert-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /profiles/{profileId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza un perfil
      parameters:
        - in: path
          name: profileId
          schema:
            type: string
          required: true
          description: ID del perfil que desea actualizar
      tags: [Profiles]
      description: Actualiza un perfil
      operationId: update-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /programs:
    post:
      security:
        - bearerAuth: []
      summary: Crea un programa
      tags: [Programs]
      description: Crea un programa
      operationId: create-program
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Program'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Trae todos los programas
      tags: [Programs]
      description: Obtener programas
      operationId: get-programs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Program'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /programs/{programId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza un programa
      parameters:
        - in: path
          name: programId
          schema:
            type: number
          required: true
          description: ID del programa que desea actualizar
      tags: [Programs]
      description: Actualiza un programa
      operationId: update-program
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProgram'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Consulta un programa
      parameters:
        - in: path
          name: programId
          schema:
            type: number
          required: true
          description: ID del programa que desea consultar
      tags: [Programs]
      description: Trae un programa por ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /roles:
    post:
      security:
        - bearerAuth: []
      summary: Crea un rol
      tags: [Roles]
      description: Crea un rol
      operationId: create-role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRole'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Trae todos los roles
      tags: [Roles]
      description: Obtener roles
      operationId: get-roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /roles/{roleId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza un rol
      parameters:
        - in: path
          name: roleId
          schema:
            type: number
          required: true
          description: ID del rol que desea actualizar
      tags: [Roles]
      description: Actualiza un rol
      operationId: update-role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRole'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /servers:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza un servidor
      tags: [Servers]
      description: Actualiza un servidor
      operationId: update-server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServer'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    post:
      security:
        - bearerAuth: []
      summary: Crea un servidor
      tags: [Servers]
      description: Crea un servidor
      operationId: create-server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Trae todos los servidores
      tags: [Servers]
      description: Obtener servidores
      operationId: get-servers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /servers/create:
    post:
      security:
        - bearerAuth: []
      summary: Crea un servidor
      tags: [Servers]
      description: Crea un servidor
      operationId: created-server
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatedServer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /servers/{serverId}:
    delete:
      security:
        - bearerAuth: []
      summary: Eliminar un servidor
      tags: [Servers]
      description: Elimina un servidor
      operationId: delete-server
      parameters:
        - name: serverId
          in: path
          description: ID del servidor a eliminar
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Obtener un servidor por su ID
      tags: [Servers]
      description: Obtiene un servidor por su ID
      operationId: get-server-by-id
      parameters:
        - name: serverId
          in: path
          description: ID del servidor
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /server-status:
    patch:
      security:
        - bearerAuth: []
      summary: Crea o Actualiza el estado del servidor
      tags: [ServerStatus]
      description: Crea o Actualiza el estado del servidor
      operationId: upsert-server-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Trae todos los estados del servidor
      tags: [ServerStatus]
      description: Obtener estados del servidor
      operationId: get-server-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServerStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /server-status/{serverStatusId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza el estado del servidor
      parameters:
        - in: path
          name: serverStatusId
          schema:
            type: number
          required: true
          description: ID del estado del servidor que desea actualizar
      tags: [ServerStatus]
      description: Actualiza el estado del servidor
      operationId: update-server-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServerStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /server-status/active:
    get:
      security:
        - bearerAuth: []
      summary: Obtiene todos los estados del servidor activos
      tags: [ServerStatus]
      description: Obtiene todos los estados del servidor activos
      operationId: get-active-server-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServerStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /users:
    get:
      security:
        - bearerAuth: []
      summary: Obtener todos los usuarios
      tags: [Users]
      description: Obtener todos los usuarios
      operationId: get-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
    post:
      summary: Crea un usuario
      tags: [Users]
      description: Crea un usuario
      operationId: create-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /users/me:
    get:
      security:
        - bearerAuth: []
      summary: Obtiene el usuario actual
      tags: [Users]
      description: Obtiene el usuario actual
      operationId: get-current-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}:
    put:
      summary: Actualiza el usuario
      tags: [Users]
      description: Actualiza el usuario
      operationId: update-user
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: Datos del usuario
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /users/{username}:
    get:
      summary: Valida si el usuario existe
      tags: [Users]
      description: Valida si el usuario existe
      operationId: get-user-validation
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /user-status:
    post:
      security:
        - bearerAuth: []
      summary: Crea el estado del usuario
      tags: [UserStatus]
      description: Crea el estado del usuario
      operationId: create-user-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
    get:
      security:
        - bearerAuth: []
      summary: Obtiene todos los estados del usuario
      tags: [UserStatus]
      description: Obtiene todos los estados del usuario
      operationId: get-user-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /user-status/{userStatusId}:
    put:
      security:
        - bearerAuth: []
      summary: Actualiza el estado del usuario
      parameters:
        - in: path
          name: userStatusId
          schema:
            type: number
          required: true
          description: ID del estado del usuario que desea actualizar
      tags: [UserStatus]
      description: Actualiza el estado del usuario
      operationId: update-user-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserStatus'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /images/uploads/{filename}:
    delete:
      security:
        - bearerAuth: []
      summary: Elimina una imagen
      tags:
        - Images
      description: Elimina una imagen
      operationId: delete-image
      parameters:
        - in: path
          name: filename
          schema:
            type: string
          required: true
          description: Nombre de la imagen que desea eliminar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Image deleted successfully
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UnauthorizedError'
  /images/uploads:
    get:
      security:
        - bearerAuth: []
      description: List all uploaded files
      tags:
        - Images
      responses:
        '200':
          description: An array of uploaded files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    filename:
                      type: string
                      description: The name of the uploaded file
                      example: image.jpg
                    url:
                      type: string
                      description: The URL of the uploaded file
                      example: http://localhost:8080/uploads/image.jpg
  /uploads/{filename}:
    get:
      description: Ver una imagen guardada
      tags:
        - Images
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
            description: The name of the image file to retrieve.
      responses:
        '200':
          description: The image file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          description: The image file was not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/NotFoundError'
  /images/upload:
    post:
      security:
        - bearerAuth: []
      description: 'Upload images to the server'
      tags:
        - Images
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: The image to upload.
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: The URL of the uploaded image.
                    example: http://localhost:8080/uploads/image.jpg
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/responses/BadRequestError'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      description: Bad Request
    NotFoundError:
      description: Not Found
    InternalServerError:
      description: Internal Server Error
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SigninRequest:
      type: object
      properties:
        username:
          type: string
          description: Usuario del Chaira
          example: j.doe
        password:
          type: string
          description: Contrase√±a del Chaira
          example: jhon_doe_1234
    SigninResponse:
      type: object
      properties:
        id:
          type: string
          description: ID del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
        username:
          type: string
          description: Usuario del Chaira
          example: j.doe
        role:
          type: string
          description: Rol del usuario
          example: USER
        status:
          type: string
          description: Estado del usuario
          example: ACTIVE
        accessToken:
          type: string
          description: Token del usuario
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refreshToken:
          type: string
          description: Token de refresco del usuario
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Faculty:
      type: object
      properties:
        id:
          type: number
          description: ID de la facultad
          example: 1
        name:
          type: string
          description: Nombre de la facultad
          example: Facultad de Ingenier√≠a
        status:
          type: boolean
          description: Estado de la facultad
          example: true
        programs:
          type: array
          description: Programas de la facultad
          items:
            $ref: '#/components/schemas/Program'
    Program:
      type: object
      properties:
        id:
          type: number
          description: ID del programa
          example: 1
        name:
          type: string
          description: Nombre del programa
          example: Programa de Ingenier√≠a
        status:
          type: boolean
          description: Estado del programa
          example: true
        facultyId:
          type: number
          description: ID de la facultad
          example: 1
    UpdateProgram:
      type: object
      properties:
        name:
          type: string
          description: Nombre del programa
          example: Programa de Ingenier√≠a
        status:
          type: boolean
          description: Estado del programa
          example: true
    CreatePerson:
      type: object
      properties:
        firstname:
          type: string
          description: Primer nombre del usuario
          example: Daniel
        secondName:
          type: string
          description: Segundo nombre del usuario
          example: Facundo
        firstSurname:
          type: string
          description: Primer apellido del usuario
          example: Toquica
        secondSurname:
          type: string
          description: Segundo apellido del usuario
          example: Agudelo
        email:
          type: string
          description: Email del usuario
          example: daniel.facundo@gmail.com
        programId:
          type: number
          description: ID del programa
          example: 1
        userId:
          type: string
          description: ID del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
    Person:
      type: object
      properties:
        id:
          type: string
          description: ID del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
        firstname:
          type: string
          description: Primer nombre del usuario
          example: Daniel
        secondName:
          type: string
          description: Segundo nombre del usuario
          example: Facundo
        firstSurname:
          type: string
          description: Primer apellido del usuario
          example: Toquica
        secondSurname:
          type: string
          description: Segundo apellido del usuario
          example: Agudelo
        email:
          type: string
          description: Email del usuario
          example: daniel.facundo@gmail.com
        programId:
          type: number
          description: ID del programa
          example: 1
        userId:
          type: string
          description: ID del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
    Profile:
      type: object
      properties:
        id:
          type: string
          description: ID del perfil del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
        birthDate:
          type: string
          description: Fecha de nacimiento del usuario
          example: 1990-01-01
        phone:
          type: string
          description: Telefono del usuario
          example: 302 123 4567
        photo:
          type: string
          description: Foto del usuario
          example: https://www.google.com/photo.jpg
        userId:
          type: string
          description: ID del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
    Role:
      type: object
      properties:
        id:
          type: number
          description: ID del rol
          example: 1
        name:
          type: string
          description: Nombre del rol
          example: USER
        status:
          type: boolean
          description: Estado del rol
          example: true
    CreateRole:
      type: object
      properties:
        name:
          type: string
          description: Nombre del rol
          example: USER

    CreatedServer:
      type: object
      properties:
        port:
          type: number
          description: Puerto del servidor
          example: 8080
        gridName:
          type: string
          description: Nombre del servidor
          example: localhost

    CreateServer:
      type: object
      properties:
        pvtoPort:
          type: number
          description: Puerto del WS
          example: 8080
        port:
          type: number
          description: Puerto del servidor
          example: 8080
        urlHost:
          type: string
          description: URL del servidor
          example: http://localhost:8080
        gridName:
          type: string
          description: Nombre del servidor
          example: localhost
        dataSource:
          type: string
          description: URL de los archivos del servidor
          example: http://localhost:8080/data
        dataBaseName:
          type: string
          description: Nombre de la base de datos
          example: ua3d
        dataBaseUser:
          type: string
          description: Usuario de la base de datos
          example: ua3d
        dataBasePassword:
          type: string
          description: Contrase√±a de la base de datos
          example: ua3d
    Server:
      type: object
      properties:
        id:
          type: string
          description: ID del servidor
          example: 2318fb07
        processId:
          type: string
          description: ID del proceso del servidor
          example: 2318fb07
        port:
          type: number
          description: Puerto del servidor
          example: 8080
        urlHost:
          type: string
          description: URL del servidor
          example: http://localhost:8080
        gridName:
          type: string
          description: Nombre del servidor
          example: localhost
        dataSource:
          type: string
          description: URL de los archivos del servidor
          example: http://localhost:8080/data
        dataBaseName:
          type: string
          description: Nombre de la base de datos
          example: ua3d
        dataBaseUser:
          type: string
          description: Usuario de la base de datos
          example: ua3d
        dataBasePassword:
          type: string
          description: Contrase√±a de la base de datos
          example: ua3d
        statusId:
          type: number
          description: Id del estado del servidor
          example: 1
    ServerStatus:
      type: object
      properties:
        id:
          type: number
          description: ID del estado del servidor
          example: 1
        name:
          type: string
          description: Nombre del estado del servidor
          example: ACTIVE
        status:
          type: boolean
          description: Estado del estado del servidor
          example: true
    CreateServerStatus:
      type: object
      properties:
        name:
          type: string
          description: Nombre del estado del servidor
          example: ACTIVE
    User:
      type: object
      properties:
        id:
          type: string
          description: ID del usuario
          example: 2318fb07-d6af-45db-ae0b-459e468a5e24
        username:
          type: string
          description: Usuario del Chaira
          example: j.doe
        password:
          type: string
          description: Contrase√±a del Chaira
          example: jhon_doe_1234
        statusId:
          type: number
          description: ID del estado del usuario
          example: 1
        roleId:
          type: number
          description: ID del rol del usuario
          example: 1
    CreateUser:
      type: object
      properties:
        username:
          type: string
          description: Usuario del Chaira
          example: j.doe
        password:
          type: string
          description: Contrase√±a del Chaira
          example: jhon_doe_1234
        statusId:
          type: number
          description: ID del estado del usuario
          example: 1
        roleId:
          type: number
          description: ID del rol del usuario
          example: 1
    UserStatus:
      type: object
      properties:
        id:
          type: number
          description: ID del estado del usuario
          example: 1
        name:
          type: string
          description: Nombre del estado del usuario
          example: ACTIVE
        status:
          type: boolean
          description: Estado del estado del usuario
          example: true
    CreateUserStatus:
      type: object
      properties:
        name:
          type: string
          description: Nombre del estado del usuario
          example: ACTIVE
